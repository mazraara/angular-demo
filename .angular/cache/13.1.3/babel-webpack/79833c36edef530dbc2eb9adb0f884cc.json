{"ast":null,"code":"import _createClass from \"/Users/gapstars/Documents/Projects/ngrx-12-finished/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/gapstars/Documents/Projects/ngrx-12-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { __decorate, __metadata } from \"tslib\";\nimport { Router } from '@angular/router';\nimport { Actions, ofType, Effect } from '@ngrx/effects';\nimport { switchMap, catchError, map, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport * as AuthActions from './auth.actions';\nimport { User } from '../user.model';\nimport { AuthService } from '../auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../auth.service\";\n\nvar handleAuthentication = function handleAuthentication(expiresIn, email, userId, token) {\n  var expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n  var user = new User(email, userId, token, expirationDate);\n  localStorage.setItem('userData', JSON.stringify(user));\n  return new AuthActions.AuthenticateSuccess({\n    email: email,\n    userId: userId,\n    token: token,\n    expirationDate: expirationDate,\n    redirect: true\n  });\n};\n\nvar handleError = function handleError(errorRes) {\n  var errorMessage = 'An unknown error occurred!';\n\n  if (!errorRes.error || !errorRes.error.error) {\n    return of(new AuthActions.AuthenticateFail(errorMessage));\n  }\n\n  switch (errorRes.error.error.message) {\n    case 'EMAIL_EXISTS':\n      errorMessage = 'This email exists already';\n      break;\n\n    case 'EMAIL_NOT_FOUND':\n      errorMessage = 'This email does not exist.';\n      break;\n\n    case 'INVALID_PASSWORD':\n      errorMessage = 'This password is not correct.';\n      break;\n  }\n\n  return of(new AuthActions.AuthenticateFail(errorMessage));\n};\n\nexport var AuthEffects = /*#__PURE__*/_createClass(function AuthEffects(actions$, http, router, authService) {\n  var _this = this;\n\n  _classCallCheck(this, AuthEffects);\n\n  this.actions$ = actions$;\n  this.http = http;\n  this.router = router;\n  this.authService = authService;\n  this.authSignup = this.actions$.pipe(ofType(AuthActions.SIGNUP_START), switchMap(function (signupAction) {\n    return _this.http.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=' + environment.firebaseAPIKey, {\n      email: signupAction.payload.email,\n      password: signupAction.payload.password,\n      returnSecureToken: true\n    }).pipe(tap(function (resData) {\n      _this.authService.setLogoutTimer(+resData.expiresIn * 1000);\n    }), map(function (resData) {\n      return handleAuthentication(+resData.expiresIn, resData.email, resData.localId, resData.idToken);\n    }), catchError(function (errorRes) {\n      return handleError(errorRes);\n    }));\n  }));\n  this.authLogin = this.actions$.pipe(ofType(AuthActions.LOGIN_START), switchMap(function (authData) {\n    return _this.http.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=' + environment.firebaseAPIKey, {\n      email: authData.payload.email,\n      password: authData.payload.password,\n      returnSecureToken: true\n    }).pipe(tap(function (resData) {\n      _this.authService.setLogoutTimer(+resData.expiresIn * 1000);\n    }), map(function (resData) {\n      return handleAuthentication(+resData.expiresIn, resData.email, resData.localId, resData.idToken);\n    }), catchError(function (errorRes) {\n      return handleError(errorRes);\n    }));\n  }));\n  this.authRedirect = this.actions$.pipe(ofType(AuthActions.AUTHENTICATE_SUCCESS), tap(function (authSuccessAction) {\n    if (authSuccessAction.payload.redirect) {\n      _this.router.navigate(['/']);\n    }\n  }));\n  this.autoLogin = this.actions$.pipe(ofType(AuthActions.AUTO_LOGIN), map(function () {\n    var userData = JSON.parse(localStorage.getItem('userData'));\n\n    if (!userData) {\n      return {\n        type: 'DUMMY'\n      };\n    }\n\n    var loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n    if (loadedUser.token) {\n      // this.user.next(loadedUser);\n      var expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n\n      _this.authService.setLogoutTimer(expirationDuration);\n\n      return new AuthActions.AuthenticateSuccess({\n        email: loadedUser.email,\n        userId: loadedUser.id,\n        token: loadedUser.token,\n        expirationDate: new Date(userData._tokenExpirationDate),\n        redirect: false\n      }); // const expirationDuration =\n      //   new Date(userData._tokenExpirationDate).getTime() -\n      //   new Date().getTime();\n      // this.autoLogout(expirationDuration);\n    }\n\n    return {\n      type: 'DUMMY'\n    };\n  }));\n  this.authLogout = this.actions$.pipe(ofType(AuthActions.LOGOUT), tap(function () {\n    _this.authService.clearLogoutTimer();\n\n    localStorage.removeItem('userData');\n\n    _this.router.navigate(['/auth']);\n  }));\n});\n\nAuthEffects.ɵfac = function AuthEffects_Factory(t) {\n  return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i4.AuthService));\n};\n\nAuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthEffects,\n  factory: AuthEffects.ɵfac\n});\n\n__decorate([Effect(), __metadata(\"design:type\", Object)], AuthEffects.prototype, \"authSignup\", void 0);\n\n__decorate([Effect(), __metadata(\"design:type\", Object)], AuthEffects.prototype, \"authLogin\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n}), __metadata(\"design:type\", Object)], AuthEffects.prototype, \"authRedirect\", void 0);\n\n__decorate([Effect(), __metadata(\"design:type\", Object)], AuthEffects.prototype, \"autoLogin\", void 0);\n\n__decorate([Effect({\n  dispatch: false\n}), __metadata(\"design:type\", Object)], AuthEffects.prototype, \"authLogout\", void 0);","map":null,"metadata":{},"sourceType":"module"}