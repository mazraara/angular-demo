{"ast":null,"code":"import _classCallCheck from \"/Users/gapstars/Documents/Projects/ngrx-12-finished/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/gapstars/Documents/Projects/ngrx-12-finished/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Actions, ofType } from '@ngrx/effects';\nimport { take, map, switchMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as RecipesActions from '../recipes/store/recipe.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nexport var RecipesResolverService = /*#__PURE__*/(function () {\n  var RecipesResolverService = /*#__PURE__*/function () {\n    function RecipesResolverService(store, actions$) {\n      _classCallCheck(this, RecipesResolverService);\n\n      this.store = store;\n      this.actions$ = actions$;\n    }\n\n    _createClass(RecipesResolverService, [{\n      key: \"resolve\",\n      value: function resolve(route, state) {\n        var _this = this;\n\n        // return this.dataStorageService.fetchRecipes();\n        return this.store.select('recipes').pipe(take(1), map(function (recipesState) {\n          return recipesState.recipes;\n        }), switchMap(function (recipes) {\n          if (recipes.length === 0) {\n            _this.store.dispatch(new RecipesActions.FetchRecipes());\n\n            return _this.actions$.pipe(ofType(RecipesActions.SET_RECIPES), take(1));\n          } else {\n            return of(recipes);\n          }\n        }));\n      }\n    }]);\n\n    return RecipesResolverService;\n  }();\n\n  RecipesResolverService.ɵfac = function RecipesResolverService_Factory(t) {\n    return new (t || RecipesResolverService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions));\n  };\n\n  RecipesResolverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecipesResolverService,\n    factory: RecipesResolverService.ɵfac,\n    providedIn: 'root'\n  });\n  return RecipesResolverService;\n})();","map":null,"metadata":{},"sourceType":"module"}